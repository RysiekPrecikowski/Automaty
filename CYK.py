from collections import defaultdict
from pprint import pprint

def cyk(grammar, starting, word):
    n = len(word)
    t = [[set() for i in range(j)] for j in range(n, 0, -1)]
    ch_arr = [[[None] *2 for i in range(j)] for j in range(n, 0, -1)]

    for i in range(n):
        for lhs, rule in grammar.items():
            for rhs in rule:
                if len(rhs) == 1 and rhs == word[i]:
                    t[0][i].add(lhs)

    for l in range(1, n):
        for s in range(0, n - l):
            for p in range(1, l + 1):
                for lhs, rule in grammar.items():
                    for rhs in rule:
                        if len(rhs) == 2 and rhs[0] in t[p - 1][s] and rhs[1] in t[l - p][s + p]:
                            print(lhs, rhs)
                            t[l][s].add(lhs)
                            ch_arr[l][s][0] = p - 1, s, rhs[0]
                            ch_arr[l][s][1] = l - p, s + p, rhs[1]



    pprint(t)



    if starting in t[n - 1][0]:
        return True
    else:
        return False


def run_cyk(grammar, starting, word):

    pprint(grammar)



    if cyk(grammar, starting, word):
        print("'{}' can be generated by grammar".format(word))
    else:
        print("'{}' cannot be generated by grammar".format(word))


def main():
    # grammar = {
    #     'S': {'AC', 'AB'},
    #     'C': {'SB'},
    #     'A': {'a'},
    #     'B': {'b'},
    # }
    # starting = 'S'

    grammar = {
        'S': {'AA', 'SA', 'c'},
        'A': {'BB', 'AB', 'a'},
        'B': {'SS', 'BS', 'b'},
    }
    starting = 'S'
    word = 'cbaabc'

    run_cyk(grammar, starting, word)


if __name__ == '__main__':
    main()